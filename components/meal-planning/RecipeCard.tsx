import React, { useState } from 'react';
import {
  View,
  Text,
  ScrollView,
  TouchableOpacity,
  Alert,
  StyleSheet,
  Share,
} from 'react-native';

// Types for the recipe card
interface DetectedAllergen {
  name: string;
  confidence: number;
  severity: 'mild' | 'moderate' | 'severe' | 'life_threatening';
  icon: string;
  warning_text: string;
}

interface SavedRecipe {
  id: string;
  title: string;
  description: string;
  ingredients: string[];
  instructions: string[];
  prep_time: number;
  cook_time: number;
  total_time: number;
  servings: number;
  difficulty: 'easy' | 'medium' | 'hard';
  family_reasoning: string;
  allergen_considerations: string;
  dietary_compliance: string[];
  nutrition_highlights: string;
  safety_notes: string;
  ai_generated: boolean;
  detected_allergens: DetectedAllergen[];
  safety_warnings: string[];
  safety_score: number;
  generation_cost: number;
  estimated_cost?: number;
}

interface FamilyMember {
  id: string;
  name: string;
  age_group: 'child' | 'teen' | 'adult' | 'senior';
  dietary_restrictions: string[];
  allergies: string[];
  allergy_severity: string[];
}

interface UserPreferences {
  household_size: number;
  cooking_skill: 'beginner' | 'intermediate' | 'advanced';
  budget_level: 'budget' | 'moderate' | 'premium';
  family_members?: FamilyMember[];
}

interface RecipeCardProps {
  recipe: SavedRecipe;
  userPreferences?: UserPreferences;
  mealType?: 'breakfast' | 'lunch' | 'dinner';
  mealDate?: string;
  onRegenerate?: () => void;
  onStartCooking?: () => void;
  onAddToShoppingList?: () => void;
  showActions?: boolean;
}

export default function RecipeCard({
  recipe,
  userPreferences,
  mealType,
  mealDate,
  onRegenerate,
  onStartCooking,
  onAddToShoppingList,
  showActions = true,
}: RecipeCardProps) {
  const [expandedSection, setExpandedSection] = useState<string | null>(null);
  const [showFullIngredients, setShowFullIngredients] = useState(false);
  const [showFullInstructions, setShowFullInstructions] = useState(false);

  // Toggle section expansion
  const toggleSection = (section: string) => {
    setExpandedSection(expandedSection === section ? null : section);
  };

  // Get difficulty styling
  const getDifficultyStyle = () => {
    switch (recipe.difficulty) {
      case 'easy':
        return { color: '#059669', backgroundColor: '#D1FAE5' };
      case 'medium':
        return { color: '#D97706', backgroundColor: '#FEF3C7' };
      case 'hard':
        return { color: '#DC2626', backgroundColor: '#FEE2E2' };
      default:
        return { color: '#6B7280', backgroundColor: '#F3F4F6' };
    }
  };

  // Get safety score styling
  const getSafetyScoreStyle = () => {
    if (recipe.safety_score >= 90) return { color: '#059669', backgroundColor: '#D1FAE5' };
    if (recipe.safety_score >= 70) return { color: '#D97706', backgroundColor: '#FEF3C7' };
    return { color: '#DC2626', backgroundColor: '#FEE2E2' };
  };

  // Format date for display
  const formatMealDate = () => {
    if (!mealDate) return '';
    const date = new Date(mealDate);
    return date.toLocaleDateString('en-GB', { 
      weekday: 'long', 
      day: 'numeric', 
      month: 'long' 
    });
  };

  // Handle sharing recipe
  const handleShare = async () => {
    try {
      const shareContent = `üçΩÔ∏è ${recipe.title}

üìù Ingredients:
${recipe.ingredients.map(ing => `‚Ä¢ ${ing}`).join('\n')}

üë©‚Äçüç≥ Instructions:
${recipe.instructions.map((inst, index) => `${index + 1}. ${inst}`).join('\n')}

‚è±Ô∏è Time: ${recipe.total_time} minutes | üë• Serves: ${recipe.servings} | üìä Difficulty: ${recipe.difficulty}

üß† Generated by Ingred AI for your family
‚ö†Ô∏è Always verify ingredients for allergies and dietary restrictions`;

      await Share.share({
        message: shareContent,
        title: recipe.title,
      });
    } catch (error) {
      console.error('Error sharing recipe:', error);
    }
  };

  // Handle regeneration confirmation
  const handleRegenerate = () => {
    Alert.alert(
      'Regenerate Recipe',
      'This will create a new recipe for this meal. The current recipe will be replaced. Continue?',
      [
        { text: 'Cancel', style: 'cancel' },
        { 
          text: 'Regenerate', 
          style: 'destructive',
          onPress: () => onRegenerate?.()
        }
      ]
    );
  };

  return (
    <ScrollView style={styles.container} showsVerticalScrollIndicator={false}>
      {/* Header Section */}
      <View style={styles.header}>
        {/* Recipe Title and Meta */}
        <View style={styles.titleSection}>
          <Text style={styles.title}>{recipe.title}</Text>
          {mealDate && mealType && (
            <Text style={styles.mealContext}>
              {mealType.charAt(0).toUpperCase() + mealType.slice(1)} ‚Ä¢ {formatMealDate()}
            </Text>
          )}
          <Text style={styles.description}>{recipe.description}</Text>
        </View>

        {/* Recipe Meta Grid */}
        <View style={styles.metaGrid}>
          <View style={styles.metaItem}>
            <Text style={styles.metaValue}>‚è±Ô∏è {recipe.total_time}m</Text>
            <Text style={styles.metaLabel}>Total Time</Text>
          </View>
          <View style={styles.metaItem}>
            <Text style={styles.metaValue}>üë• {recipe.servings}</Text>
            <Text style={styles.metaLabel}>Servings</Text>
          </View>
          <View style={styles.metaItem}>
            <View style={[styles.difficultyBadge, getDifficultyStyle()]}>
              <Text style={[styles.metaValue, { color: getDifficultyStyle().color }]}>
                {recipe.difficulty}
              </Text>
            </View>
            <Text style={styles.metaLabel}>Difficulty</Text>
          </View>
          <View style={styles.metaItem}>
            <View style={[styles.safetyBadge, getSafetyScoreStyle()]}>
              <Text style={[styles.metaValue, { color: getSafetyScoreStyle().color }]}>
                {recipe.safety_score}%
              </Text>
            </View>
            <Text style={styles.metaLabel}>Safety Score</Text>
          </View>
        </View>
      </View>

      {/* Safety Warnings Section */}
      {(recipe.detected_allergens.length > 0 || recipe.safety_warnings.length > 0) && (
        <View style={styles.safetySection}>
          <Text style={styles.sectionTitle}>üõ°Ô∏è Safety Information</Text>
          
          {/* Detected Allergens */}
          {recipe.detected_allergens.length > 0 && (
            <View style={styles.allergenSection}>
              <Text style={styles.allergenTitle}>Detected Allergens:</Text>
              <View style={styles.allergenGrid}>
                {recipe.detected_allergens.map((allergen, index) => (
                  <View key={index} style={[
                    styles.allergenItem,
                    allergen.severity === 'severe' || allergen.severity === 'life_threatening' 
                      ? styles.allergenCritical 
                      : styles.allergenWarning
                  ]}>
                    <Text style={styles.allergenIcon}>{allergen.icon}</Text>
                    <Text style={styles.allergenName}>{allergen.name}</Text>
                    {(allergen.severity === 'severe' || allergen.severity === 'life_threatening') && (
                      <Text style={styles.allergenCriticalText}>‚ö†Ô∏è</Text>
                    )}
                  </View>
                ))}
              </View>
            </View>
          )}

          {/* Safety Warnings */}
          {recipe.safety_warnings.length > 0 && (
            <View style={styles.warningsSection}>
              {recipe.safety_warnings.map((warning, index) => (
                <View key={index} style={styles.warningItem}>
                  <Text style={styles.warningIcon}>‚ö†Ô∏è</Text>
                  <Text style={styles.warningText}>{warning}</Text>
                </View>
              ))}
            </View>
          )}

          {/* Allergen Considerations */}
          {recipe.allergen_considerations && (
            <View style={styles.considerationsSection}>
              <Text style={styles.considerationsTitle}>Allergen Notes:</Text>
              <Text style={styles.considerationsText}>{recipe.allergen_considerations}</Text>
            </View>
          )}
        </View>
      )}

      {/* AI Content Notice */}
      {recipe.ai_generated && (
        <View style={styles.aiNotice}>
          <Text style={styles.aiNoticeIcon}>üß†</Text>
          <View style={styles.aiNoticeContent}>
            <Text style={styles.aiNoticeTitle}>AI-Generated Recipe</Text>
            <Text style={styles.aiNoticeText}>
              This recipe was created by artificial intelligence based on your family's preferences. 
              Always verify ingredients for allergies and dietary restrictions.
            </Text>
          </View>
        </View>
      )}

      {/* Family Reasoning Section */}
      {recipe.family_reasoning && (
        <TouchableOpacity 
          style={styles.expandableSection}
          onPress={() => toggleSection('family')}
          accessible={true}
          accessibilityLabel="Why this recipe works for your family"
        >
          <View style={styles.sectionHeader}>
            <Text style={styles.sectionTitle}>üë®‚Äçüë©‚Äçüëß‚Äçüë¶ Why This Works for Your Family</Text>
            <Text style={styles.expandIcon}>
              {expandedSection === 'family' ? '‚àí' : '+'}
            </Text>
          </View>
          {expandedSection === 'family' && (
            <Text style={styles.sectionContent}>{recipe.family_reasoning}</Text>
          )}
        </TouchableOpacity>
      )}

      {/* Ingredients Section */}
      <View style={styles.section}>
        <View style={styles.sectionHeader}>
          <Text style={styles.sectionTitle}>üõí Ingredients</Text>
          <TouchableOpacity onPress={() => setShowFullIngredients(!showFullIngredients)}>
            <Text style={styles.expandText}>
              {showFullIngredients ? 'Show Less' : `Show All (${recipe.ingredients.length})`}
            </Text>
          </TouchableOpacity>
        </View>
        <View style={styles.ingredientsList}>
          {(showFullIngredients ? recipe.ingredients : recipe.ingredients.slice(0, 6))
            .map((ingredient, index) => (
            <View key={index} style={styles.ingredientItem}>
              <View style={styles.ingredientBullet} />
              <Text style={styles.ingredientText}>{ingredient}</Text>
            </View>
          ))}
          {!showFullIngredients && recipe.ingredients.length > 6 && (
            <TouchableOpacity 
              style={styles.showMoreButton}
              onPress={() => setShowFullIngredients(true)}
            >
              <Text style={styles.showMoreText}>
                Show {recipe.ingredients.length - 6} more ingredients...
              </Text>
            </TouchableOpacity>
          )}
        </View>
      </View>

      {/* Instructions Section */}
      <View style={styles.section}>
        <View style={styles.sectionHeader}>
          <Text style={styles.sectionTitle}>üë©‚Äçüç≥ Instructions</Text>
          <TouchableOpacity onPress={() => setShowFullInstructions(!showFullInstructions)}>
            <Text style={styles.expandText}>
              {showFullInstructions ? 'Show Less' : `Show All (${recipe.instructions.length})`}
            </Text>
          </TouchableOpacity>
        </View>
        <View style={styles.instructionsList}>
          {(showFullInstructions ? recipe.instructions : recipe.instructions.slice(0, 4))
            .map((instruction, index) => (
            <View key={index} style={styles.instructionItem}>
              <View style={styles.stepNumber}>
                <Text style={styles.stepNumberText}>{index + 1}</Text>
              </View>
              <Text style={styles.instructionText}>{instruction}</Text>
            </View>
          ))}
          {!showFullInstructions && recipe.instructions.length > 4 && (
            <TouchableOpacity 
              style={styles.showMoreButton}
              onPress={() => setShowFullInstructions(true)}
            >
              <Text style={styles.showMoreText}>
                Show {recipe.instructions.length - 4} more steps...
              </Text>
            </TouchableOpacity>
          )}
        </View>
      </View>

      {/* Nutrition & Dietary Section */}
      {(recipe.nutrition_highlights || recipe.dietary_compliance.length > 0) && (
        <TouchableOpacity 
          style={styles.expandableSection}
          onPress={() => toggleSection('nutrition')}
          accessible={true}
          accessibilityLabel="Nutrition and dietary information"
        >
          <View style={styles.sectionHeader}>
            <Text style={styles.sectionTitle}>ü•ó Nutrition & Dietary Info</Text>
            <Text style={styles.expandIcon}>
              {expandedSection === 'nutrition' ? '‚àí' : '+'}
            </Text>
          </View>
          {expandedSection === 'nutrition' && (
            <View style={styles.nutritionContent}>
              {recipe.nutrition_highlights && (
                <View style={styles.nutritionItem}>
                  <Text style={styles.nutritionLabel}>Nutrition Highlights:</Text>
                  <Text style={styles.nutritionText}>{recipe.nutrition_highlights}</Text>
                </View>
              )}
              {recipe.dietary_compliance.length > 0 && (
                <View style={styles.nutritionItem}>
                  <Text style={styles.nutritionLabel}>Dietary Compliance:</Text>
                  <View style={styles.complianceList}>
                    {recipe.dietary_compliance.map((item, index) => (
                      <View key={index} style={styles.complianceItem}>
                        <Text style={styles.complianceText}>‚úì {item}</Text>
                      </View>
                    ))}
                  </View>
                </View>
              )}
              <Text style={styles.nutritionDisclaimer}>
                Nutritional information is estimated. Consult healthcare providers for medical dietary advice.
              </Text>
            </View>
          )}
        </TouchableOpacity>
      )}

      {/* Safety Notes */}
      {recipe.safety_notes && (
        <View style={styles.safetyNotesSection}>
          <Text style={styles.sectionTitle}>üîç Safety Notes</Text>
          <Text style={styles.safetyNotesText}>{recipe.safety_notes}</Text>
        </View>
      )}

      {/* Action Buttons */}
      {showActions && (
        <View style={styles.actionsSection}>
          <View style={styles.primaryActions}>
            {onStartCooking && (
              <TouchableOpacity 
                style={styles.primaryButton}
                onPress={onStartCooking}
                accessible={true}
                accessibilityLabel="Start cooking this recipe"
              >
                <Text style={styles.primaryButtonText}>üë©‚Äçüç≥ Start Cooking</Text>
              </TouchableOpacity>
            )}
            {onAddToShoppingList && (
              <TouchableOpacity 
                style={styles.secondaryButton}
                onPress={onAddToShoppingList}
                accessible={true}
                accessibilityLabel="Add ingredients to shopping list"
              >
                <Text style={styles.secondaryButtonText}>üõí Add to List</Text>
              </TouchableOpacity>
            )}
          </View>
          
          <View style={styles.secondaryActions}>
            <TouchableOpacity 
              style={styles.actionButton}
              onPress={handleShare}
              accessible={true}
              accessibilityLabel="Share this recipe"
            >
              <Text style={styles.actionButtonText}>Share</Text>
            </TouchableOpacity>
            {onRegenerate && (
              <TouchableOpacity 
                style={styles.actionButton}
                onPress={handleRegenerate}
                accessible={true}
                accessibilityLabel="Generate a different recipe"
              >
                <Text style={styles.actionButtonText}>Regenerate</Text>
              </TouchableOpacity>
            )}
          </View>
        </View>
      )}

      {/* Legal Footer */}
      <View style={styles.legalFooter}>
        <Text style={styles.legalText}>
          üìã Recipe generated by Ingred AI. Always verify ingredients for allergies and dietary restrictions. 
          This is not medical advice - consult healthcare providers for specific dietary requirements.
        </Text>
      </View>
    </ScrollView>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#FFFFFF',
  },
  
  // Header styles
  header: {
    padding: 20,
    borderBottomWidth: 1,
    borderBottomColor: '#F3F4F6',
  },
  titleSection: {
    marginBottom: 16,
  },
  title: {
    fontSize: 24,
    fontWeight: '700',
    color: '#1F2937',
    marginBottom: 4,
    lineHeight: 32,
  },
  mealContext: {
    fontSize: 14,
    color: '#8B5CF6',
    fontWeight: '500',
    marginBottom: 8,
  },
  description: {
    fontSize: 16,
    color: '#6B7280',
    lineHeight: 24,
  },
  metaGrid: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    gap: 12,
  },
  metaItem: {
    flex: 1,
    alignItems: 'center',
  },
  metaValue: {
    fontSize: 14,
    fontWeight: '600',
    color: '#1F2937',
    marginBottom: 4,
  },
  metaLabel: {
    fontSize: 11,
    color: '#9CA3AF',
    textAlign: 'center',
  },
  difficultyBadge: {
    paddingHorizontal: 8,
    paddingVertical: 4,
    borderRadius: 8,
    marginBottom: 4,
  },
  safetyBadge: {
    paddingHorizontal: 8,
    paddingVertical: 4,
    borderRadius: 8,
    marginBottom: 4,
  },
  
  // Safety section
  safetySection: {
    backgroundColor: '#FEF2F2',
    borderTopWidth: 3,
    borderTopColor: '#FCA5A5',
    padding: 16,
  },
  allergenSection: {
    marginBottom: 12,
  },
  allergenTitle: {
    fontSize: 14,
    fontWeight: '600',
    color: '#991B1B',
    marginBottom: 8,
  },
  allergenGrid: {
    flexDirection: 'row',
    flexWrap: 'wrap',
    gap: 8,
  },
  allergenItem: {
    flexDirection: 'row',
    alignItems: 'center',
    paddingHorizontal: 8,
    paddingVertical: 4,
    borderRadius: 12,
    gap: 4,
  },
  allergenWarning: {
    backgroundColor: '#FEF3C7',
    borderWidth: 1,
    borderColor: '#F59E0B',
  },
  allergenCritical: {
    backgroundColor: '#FEE2E2',
    borderWidth: 1,
    borderColor: '#DC2626',
  },
  allergenIcon: {
    fontSize: 12,
  },
  allergenName: {
    fontSize: 12,
    fontWeight: '500',
    color: '#1F2937',
  },
  allergenCriticalText: {
    fontSize: 10,
  },
  warningsSection: {
    marginBottom: 12,
  },
  warningItem: {
    flexDirection: 'row',
    alignItems: 'flex-start',
    marginBottom: 8,
    gap: 8,
  },
  warningIcon: {
    fontSize: 14,
    marginTop: 2,
  },
  warningText: {
    flex: 1,
    fontSize: 13,
    color: '#DC2626',
    lineHeight: 18,
  },
  considerationsSection: {
    backgroundColor: '#FEF3C7',
    padding: 12,
    borderRadius: 8,
    borderWidth: 1,
    borderColor: '#F59E0B',
  },
  considerationsTitle: {
    fontSize: 13,
    fontWeight: '600',
    color: '#92400E',
    marginBottom: 4,
  },
  considerationsText: {
    fontSize: 12,
    color: '#92400E',
    lineHeight: 16,
  },
  
  // AI notice
  aiNotice: {
    flexDirection: 'row',
    backgroundColor: '#F3E8FF',
    padding: 16,
    borderLeftWidth: 4,
    borderLeftColor: '#8B5CF6',
    margin: 16,
    borderRadius: 8,
  },
  aiNoticeIcon: {
    fontSize: 20,
    marginRight: 12,
  },
  aiNoticeContent: {
    flex: 1,
  },
  aiNoticeTitle: {
    fontSize: 14,
    fontWeight: '600',
    color: '#5B21B6',
    marginBottom: 4,
  },
  aiNoticeText: {
    fontSize: 12,
    color: '#7C3AED',
    lineHeight: 16,
  },
  
  // Section styles
  section: {
    padding: 16,
    borderBottomWidth: 1,
    borderBottomColor: '#F3F4F6',
  },
  expandableSection: {
    padding: 16,
    borderBottomWidth: 1,
    borderBottomColor: '#F3F4F6',
  },
  sectionHeader: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    marginBottom: 12,
  },
  sectionTitle: {
    fontSize: 16,
    fontWeight: '600',
    color: '#1F2937',
  },
  expandIcon: {
    fontSize: 18,
    color: '#6B7280',
    fontWeight: '600',
  },
  expandText: {
    fontSize: 12,
    color: '#8B5CF6',
    fontWeight: '500',
  },
  sectionContent: {
    fontSize: 14,
    color: '#374151',
    lineHeight: 20,
  },
  
  // Ingredients
  ingredientsList: {
    gap: 8,
  },
  ingredientItem: {
    flexDirection: 'row',
    alignItems: 'flex-start',
    gap: 12,
  },
  ingredientBullet: {
    width: 6,
    height: 6,
    borderRadius: 3,
    backgroundColor: '#8B5CF6',
    marginTop: 8,
  },
  ingredientText: {
    flex: 1,
    fontSize: 14,
    color: '#374151',
    lineHeight: 20,
  },
  
  // Instructions
  instructionsList: {
    gap: 12,
  },
  instructionItem: {
    flexDirection: 'row',
    alignItems: 'flex-start',
    gap: 12,
  },
  stepNumber: {
    width: 24,
    height: 24,
    borderRadius: 12,
    backgroundColor: '#8B5CF6',
    justifyContent: 'center',
    alignItems: 'center',
    marginTop: 2,
  },
  stepNumberText: {
    fontSize: 12,
    fontWeight: '600',
    color: '#FFFFFF',
  },
  instructionText: {
    flex: 1,
    fontSize: 14,
    color: '#374151',
    lineHeight: 20,
  },
  
  // Show more buttons
  showMoreButton: {
    alignItems: 'center',
    paddingVertical: 8,
  },
  showMoreText: {
    fontSize: 13,
    color: '#8B5CF6',
    fontWeight: '500',
  },
  
  // Nutrition section
  nutritionContent: {
    gap: 12,
  },
  nutritionItem: {
    gap: 4,
  },
  nutritionLabel: {
    fontSize: 13,
    fontWeight: '600',
    color: '#374151',
  },
  nutritionText: {
    fontSize: 13,
    color: '#6B7280',
    lineHeight: 18,
  },
  complianceList: {
    flexDirection: 'row',
    flexWrap: 'wrap',
    gap: 8,
  },
  complianceItem: {
    backgroundColor: '#D1FAE5',
    paddingHorizontal: 8,
    paddingVertical: 4,
    borderRadius: 12,
  },
  complianceText: {
    fontSize: 12,
    color: '#065F46',
    fontWeight: '500',
  },
  nutritionDisclaimer: {
    fontSize: 11,
    color: '#9CA3AF',
    fontStyle: 'italic',
    marginTop: 4,
  },
  
  // Safety notes
  safetyNotesSection: {
    backgroundColor: '#F0FDF4',
    padding: 16,
    borderLeftWidth: 4,
    borderLeftColor: '#10B981',
  },
  safetyNotesText: {
    fontSize: 13,
    color: '#065F46',
    lineHeight: 18,
    marginTop: 8,
  },
  
  // Actions
  actionsSection: {
    padding: 16,
    gap: 12,
  },
  primaryActions: {
    flexDirection: 'row',
    gap: 12,
  },
  primaryButton: {
    flex: 1,
    backgroundColor: '#8B5CF6',
    paddingVertical: 12,
    paddingHorizontal: 16,
    borderRadius: 8,
    alignItems: 'center',
  },
  primaryButtonText: {
    fontSize: 14,
    fontWeight: '600',
    color: '#FFFFFF',
  },
  secondaryButton: {
    flex: 1,
    backgroundColor: '#F3F4F6',
    paddingVertical: 12,
    paddingHorizontal: 16,
    borderRadius: 8,
    alignItems: 'center',
    borderWidth: 1,
    borderColor: '#D1D5DB',
  },
  secondaryButtonText: {
    fontSize: 14,
    fontWeight: '600',
    color: '#374151',
  },
  secondaryActions: {
    flexDirection: 'row',
    justifyContent: 'center',
    gap: 24,
  },
  actionButton: {
    paddingVertical: 8,
    paddingHorizontal: 12,
  },
  actionButtonText: {
    fontSize: 13,
    color: '#8B5CF6',
    fontWeight: '500',
  },
  
  // Legal footer
  legalFooter: {
    backgroundColor: '#F9FAFB',
    padding: 16,
    marginTop: 8,
  },
  legalText: {
    fontSize: 11,
    color: '#6B7280',
    lineHeight: 16,
    textAlign: 'center',
  },
});